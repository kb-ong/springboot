pipeline{
    agent {
        node {
            label 'selfhosted-k8s'
        }
    }
	//agent any
    tools {
         dockerTool 'docker261'
         maven 'maven397' 
         jdk 'openjdk22'
         git 'git'
         dotnetsdk 'dotnetsdk'
    }
    environment {
        DOCKER_IMAGE_NAME = "riko20xx/springboot:latest"
        DOCKER_IMAGE = ""
        DOCKER_HOST = "tcp://172.17.0.2:2375"
        DOCKER_CREDS = credentials('docker-token')
        DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1		
    }    

     stages{
        stage('Packaging') {
          steps {           
            withMaven(globalMavenSettingsConfig: 'global-maven-setting', jdk: 'openjdk22', maven: 'maven397', mavenSettingsConfig: '', traceability: true) {
              sh 'mvn package'
            }
          }
        }
        stage('Build image') {
          steps {
			script {
				dockerImage = docker.build "${DOCKER_IMAGE_NAME}"
			}				
          }
        }

        stage('Push image') {
          steps {
			script {
				withCredentials([string(credentialsId: 'docker-token', variable: 'docker-token')]) {
				   dockerImage.push()
				}
			}
          }
        }
        stage('Publish Artifact') {
          steps {           
            withMaven(globalMavenSettingsConfig: 'global-maven-setting', jdk: 'openjdk22', maven: 'maven397', mavenSettingsConfig: '', traceability: true) {
              sh 'mvn deploy'
            }
          }
        }
        stage('Deploying image to k8s') {
          steps {
              withKubeConfig(credentialsId: 'k8s-deployer-token', clusterName: 'kubernetes-admin@kubernetes', contextName: 'kubernetes-admin@kubernetes', namespace: '', restrictKubeConfigAccess: false, serverUrl: 'https://172.27.210.223:6443') {
                 sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
                 sh 'chmod u+x ./kubectl'
                 sh './kubectl apply -f deployment.yaml -n default'
              }
          }
        }        
        // stage('SonarQube Analysis') {
        //   steps {           
        //         withSonarQubeEnv('sonarqube') {
        //             sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Demo -Dsonar.projectKey=Demo \
        //                 -Dsonar.java.binaries=./target -Dsonar.sources=. -Dsonar.inclusions=src/main/**  '''
        //         }
        //   }
        // } 
        
        // stage('SonarQube Quality Gate') {
        //   steps {           
        //       script {
        //             waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-token'
        //       }
        //   }
        // }
        
    }
    post {
        always {
            archiveArtifacts artifacts: 'trivy.txt', fingerprint: true
            publishHTML(
                [allowMissing: false, 
                alwaysLinkToLastBuild: false, 
                keepAll: false, 
                reportDir: '.', 
                reportFiles: 'trivy.txt', 
                reportName: 'TrivyReport', 
                reportTitles: '', 
                useWrapperFileDirectly: true]
            )
        }
    }
}